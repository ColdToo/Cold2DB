// Code generated by MockGen. DO NOT EDIT.
// Source: ./db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	marshal "github.com/ColdToo/Cold2DB/db/marshal"
	pb "github.com/ColdToo/Cold2DB/pb"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockStorage) Apply(kvs []*marshal.KV) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", kvs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockStorageMockRecorder) Apply(kvs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockStorage)(nil).Apply), kvs)
}

// Close mocks base method.
func (m *MockStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// Entries mocks base method.
func (m *MockStorage) Entries(lo, hi, maxSize uint64) ([]pb.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entries", lo, hi, maxSize)
	ret0, _ := ret[0].([]pb.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Entries indicates an expected call of Entries.
func (mr *MockStorageMockRecorder) Entries(lo, hi, maxSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entries", reflect.TypeOf((*MockStorage)(nil).Entries), lo, hi, maxSize)
}

// FirstIndex mocks base method.
func (m *MockStorage) FirstIndex() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstIndex")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// FirstIndex indicates an expected call of FirstIndex.
func (mr *MockStorageMockRecorder) FirstIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstIndex", reflect.TypeOf((*MockStorage)(nil).FirstIndex))
}

// Get mocks base method.
func (m *MockStorage) Get(key []byte) (*marshal.KV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*marshal.KV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), key)
}

// InitialState mocks base method.
func (m *MockStorage) InitialState() (pb.HardState, pb.ConfState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialState")
	ret0, _ := ret[0].(pb.HardState)
	ret1, _ := ret[1].(pb.ConfState)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InitialState indicates an expected call of InitialState.
func (mr *MockStorageMockRecorder) InitialState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialState", reflect.TypeOf((*MockStorage)(nil).InitialState))
}

// LastIndex mocks base method.
func (m *MockStorage) LastIndex() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastIndex")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// LastIndex indicates an expected call of LastIndex.
func (mr *MockStorageMockRecorder) LastIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastIndex", reflect.TypeOf((*MockStorage)(nil).LastIndex))
}

// PersistHardState mocks base method.
func (m *MockStorage) PersistHardState(st pb.HardState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistHardState", st)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistHardState indicates an expected call of PersistHardState.
func (mr *MockStorageMockRecorder) PersistHardState(st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistHardState", reflect.TypeOf((*MockStorage)(nil).PersistHardState), st)
}

// PersistUnstableEnts mocks base method.
func (m *MockStorage) PersistUnstableEnts(entries []*pb.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistUnstableEnts", entries)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistUnstableEnts indicates an expected call of PersistUnstableEnts.
func (mr *MockStorageMockRecorder) PersistUnstableEnts(entries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistUnstableEnts", reflect.TypeOf((*MockStorage)(nil).PersistUnstableEnts), entries)
}

// Scan mocks base method.
func (m *MockStorage) Scan(lowKey, highKey []byte) ([]*marshal.KV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", lowKey, highKey)
	ret0, _ := ret[0].([]*marshal.KV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockStorageMockRecorder) Scan(lowKey, highKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockStorage)(nil).Scan), lowKey, highKey)
}

// Snapshot mocks base method.
func (m *MockStorage) Snapshot() (pb.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(pb.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockStorageMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockStorage)(nil).Snapshot))
}

// Term mocks base method.
func (m *MockStorage) Term(i uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Term", i)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Term indicates an expected call of Term.
func (mr *MockStorageMockRecorder) Term(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Term", reflect.TypeOf((*MockStorage)(nil).Term), i)
}

// Truncate mocks base method.
func (m *MockStorage) Truncate(index uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", index)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockStorageMockRecorder) Truncate(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockStorage)(nil).Truncate), index)
}
