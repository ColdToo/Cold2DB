// Code generated by MockGen. DO NOT EDIT.
// Source: ./db.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	logfile "github.com/ColdToo/Cold2DB/db/logfile"
	pb "github.com/ColdToo/Cold2DB/pb"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// Get mocks base method.
func (m *MockDB) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDBMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDB)(nil).Get), key)
}

// IsRestartNode mocks base method.
func (m *MockDB) IsRestartNode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRestartNode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRestartNode indicates an expected call of IsRestartNode.
func (mr *MockDBMockRecorder) IsRestartNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRestartNode", reflect.TypeOf((*MockDB)(nil).IsRestartNode))
}

// Put mocks base method.
func (m *MockDB) Put(entries []logfile.WalEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", entries)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockDBMockRecorder) Put(entries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDB)(nil).Put), entries)
}

// SaveHardState mocks base method.
func (m *MockDB) SaveHardState(st pb.HardState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHardState", st)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHardState indicates an expected call of SaveHardState.
func (mr *MockDBMockRecorder) SaveHardState(st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHardState", reflect.TypeOf((*MockDB)(nil).SaveHardState), st)
}

// Scan mocks base method.
func (m *MockDB) Scan(lowKey, highKey []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", lowKey, highKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockDBMockRecorder) Scan(lowKey, highKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockDB)(nil).Scan), lowKey, highKey)
}
