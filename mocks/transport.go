// Code generated by MockGen. DO NOT EDIT.
// Source: ./transport.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	pb "github.com/ColdToo/Cold2DB/pb"
	raft "github.com/ColdToo/Cold2DB/raft"
	transport "github.com/ColdToo/Cold2DB/transport/types"
	gomock "github.com/golang/mock/gomock"
)

// MockRaftTransport is a mock of RaftTransport interface.
type MockRaftTransport struct {
	ctrl     *gomock.Controller
	recorder *MockRaftTransportMockRecorder
}

// MockRaftTransportMockRecorder is the mock recorder for MockRaftTransport.
type MockRaftTransportMockRecorder struct {
	mock *MockRaftTransport
}

// NewMockRaftTransport creates a new mock instance.
func NewMockRaftTransport(ctrl *gomock.Controller) *MockRaftTransport {
	mock := &MockRaftTransport{ctrl: ctrl}
	mock.recorder = &MockRaftTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftTransport) EXPECT() *MockRaftTransportMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m_2 *MockRaftTransport) Process(m *pb.Message) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Process", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockRaftTransportMockRecorder) Process(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockRaftTransport)(nil).Process), m)
}

// ReportSnapshotStatus mocks base method.
func (m *MockRaftTransport) ReportSnapshotStatus(id uint64, status raft.SnapshotStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportSnapshotStatus", id, status)
}

// ReportSnapshotStatus indicates an expected call of ReportSnapshotStatus.
func (mr *MockRaftTransportMockRecorder) ReportSnapshotStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSnapshotStatus", reflect.TypeOf((*MockRaftTransport)(nil).ReportSnapshotStatus), id, status)
}

// ReportUnreachable mocks base method.
func (m *MockRaftTransport) ReportUnreachable(id uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportUnreachable", id)
}

// ReportUnreachable indicates an expected call of ReportUnreachable.
func (mr *MockRaftTransportMockRecorder) ReportUnreachable(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportUnreachable", reflect.TypeOf((*MockRaftTransport)(nil).ReportUnreachable), id)
}

// MockTransporter is a mock of Transporter interface.
type MockTransporter struct {
	ctrl     *gomock.Controller
	recorder *MockTransporterMockRecorder
}

// MockTransporterMockRecorder is the mock recorder for MockTransporter.
type MockTransporterMockRecorder struct {
	mock *MockTransporter
}

// NewMockTransporter creates a new mock instance.
func NewMockTransporter(ctrl *gomock.Controller) *MockTransporter {
	mock := &MockTransporter{ctrl: ctrl}
	mock.recorder = &MockTransporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransporter) EXPECT() *MockTransporterMockRecorder {
	return m.recorder
}

// ActivePeers mocks base method.
func (m *MockTransporter) ActivePeers() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivePeers")
	ret0, _ := ret[0].(int)
	return ret0
}

// ActivePeers indicates an expected call of ActivePeers.
func (mr *MockTransporterMockRecorder) ActivePeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivePeers", reflect.TypeOf((*MockTransporter)(nil).ActivePeers))
}

// AddPeer mocks base method.
func (m *MockTransporter) AddPeer(id transport.ID, url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPeer", id, url)
}

// AddPeer indicates an expected call of AddPeer.
func (mr *MockTransporterMockRecorder) AddPeer(id, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockTransporter)(nil).AddPeer), id, url)
}

// GetErrorC mocks base method.
func (m *MockTransporter) GetErrorC() chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrorC")
	ret0, _ := ret[0].(chan error)
	return ret0
}

// GetErrorC indicates an expected call of GetErrorC.
func (mr *MockTransporterMockRecorder) GetErrorC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorC", reflect.TypeOf((*MockTransporter)(nil).GetErrorC))
}

// ListenPeerAttachConn mocks base method.
func (m *MockTransporter) ListenPeerAttachConn(localIp string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListenPeerAttachConn", localIp)
}

// ListenPeerAttachConn indicates an expected call of ListenPeerAttachConn.
func (mr *MockTransporterMockRecorder) ListenPeerAttachConn(localIp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenPeerAttachConn", reflect.TypeOf((*MockTransporter)(nil).ListenPeerAttachConn), localIp)
}

// PeerActiveSince mocks base method.
func (m *MockTransporter) PeerActiveSince(id transport.ID) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerActiveSince", id)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// PeerActiveSince indicates an expected call of PeerActiveSince.
func (mr *MockTransporterMockRecorder) PeerActiveSince(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerActiveSince", reflect.TypeOf((*MockTransporter)(nil).PeerActiveSince), id)
}

// RemoveAllPeers mocks base method.
func (m *MockTransporter) RemoveAllPeers() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveAllPeers")
}

// RemoveAllPeers indicates an expected call of RemoveAllPeers.
func (mr *MockTransporterMockRecorder) RemoveAllPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllPeers", reflect.TypeOf((*MockTransporter)(nil).RemoveAllPeers))
}

// RemovePeer mocks base method.
func (m *MockTransporter) RemovePeer(id transport.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovePeer", id)
}

// RemovePeer indicates an expected call of RemovePeer.
func (mr *MockTransporterMockRecorder) RemovePeer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockTransporter)(nil).RemovePeer), id)
}

// Send mocks base method.
func (m_2 *MockTransporter) Send(m []*pb.Message) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "Send", m)
}

// Send indicates an expected call of Send.
func (mr *MockTransporterMockRecorder) Send(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTransporter)(nil).Send), m)
}

// Stop mocks base method.
func (m *MockTransporter) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTransporterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTransporter)(nil).Stop))
}

// UpdatePeer mocks base method.
func (m *MockTransporter) UpdatePeer(id transport.ID, url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePeer", id, url)
}

// UpdatePeer indicates an expected call of UpdatePeer.
func (mr *MockTransporterMockRecorder) UpdatePeer(id, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePeer", reflect.TypeOf((*MockTransporter)(nil).UpdatePeer), id, url)
}

// MockPausable is a mock of Pausable interface.
type MockPausable struct {
	ctrl     *gomock.Controller
	recorder *MockPausableMockRecorder
}

// MockPausableMockRecorder is the mock recorder for MockPausable.
type MockPausableMockRecorder struct {
	mock *MockPausable
}

// NewMockPausable creates a new mock instance.
func NewMockPausable(ctrl *gomock.Controller) *MockPausable {
	mock := &MockPausable{ctrl: ctrl}
	mock.recorder = &MockPausableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPausable) EXPECT() *MockPausableMockRecorder {
	return m.recorder
}

// Pause mocks base method.
func (m *MockPausable) Pause() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Pause")
}

// Pause indicates an expected call of Pause.
func (mr *MockPausableMockRecorder) Pause() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockPausable)(nil).Pause))
}

// Resume mocks base method.
func (m *MockPausable) Resume() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resume")
}

// Resume indicates an expected call of Resume.
func (mr *MockPausableMockRecorder) Resume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockPausable)(nil).Resume))
}
